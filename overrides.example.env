###
### Rename this file to overrides.env and fill out the following variables for your stack
### You can add anything else you need to override here as well.
###

# These are needed for the startup script to correctly identify the type of stack you want to start or stop, see the `partner` folder for available options
STACK_PARTNER=

# STACK_NAME doesn't need to change for local stack
# If stack is hosted remotely and shares resources (ex rabbitmq), then this need to be unique
STACK_NAME=local

# You generally want 'dev' here as this scheme will setup your compose to the standard dev setup
STACK_SCHEME=dev

# Note: order here matters as it determines the order of init loads, if you have keycloak, then it generally needs to go first
STACK_COMPONENTS=license-service,playlist-manager,asset-manager,card-service,dond,reward-service,sessions,ships-service,transaction-service

# HOST_NAME is domain name of the stack
HOST_NAME=local.timeplay.me

# HOST_IP is public IP of the stack. For local stack, use local network's public IP, not internet IP
HOST_IP=0.0.0.0

# Artifactory username/password, used when you run `bash run.sh build`, or
# when installing using artifcatory urls remotely via install.sh
REPO_IMAGE_BASE=registry.timeplay.com/docker-virtual
REPO_USERNAME=
REPO_PASSWORD=

# If running gs-host-process, this should be overidden to specify the endpoint where it can be reached
# GS_HOST_PROC_URL=["http://10.0.0.224:3001"]

# Override default POSTGRES credentials
POSTGRES_APP_PASSWORD=localhost
POSTGRES_RO_PASSWORD=localhost

# Note: we set this to empty to use the default HBA config which will allow access from any ip
POSTGRES_HBA_CONFIG=

# Note: we override the secrets here to staging defaults as each partner sets their own default
AUTH_SERVICE_SECRET='Nzs7lF5L9cCDwLehoQg3Tijrt1QIQiUS'
AUTH_GUEST_SECRET='5KyjeN9GMAA4CT72bBOm7J61PJPmCqlb'
AUTH_USER_PROXY_SECRET='C2OYK9denEztOkigbM4KJ87ljgEfxYM6'

# Update the HOST_DATA/HOST_CONFIG to point to relative folders
HOST_DATA=./container-data
CERT_CONFIG=./container-config/certs
HOST_CONFIG=./container-config

# Set OpCon in debug mode
# OPCON_DEBUG=true

# URL for DOND POS
DU_CLIENT_ID='local'
DU_DATA_SERVICE_URL='http://10.20.50.148:4000'
DCS_DOND_SERVICES_URL_BASE=http://host.docker.internal:3333
DU_SCHEDULE='*/2 * * * *'

# Admin Service flags
WOF='true'

# Amount of memory to allocate to postgres for queries, note that developer
# instances don't need much, but anything under load needs an amount
# proportional to the number of sumultaneous queries being made
POSGRES_SHM_SIZE=64mb

# Reduces memory consumption, however, if you are running into hanging requests because of
# database connections, you can increase this to see if it resolves the issue.  The hanging
# connections are due to deadlocks that we need to resolve, this is a bandaid
S6_POSTGRES_POOL_MAX_IDLE_CONNS=5
S6_POSTGRES_POOL_MAX_OPEN_CONNS=10

# set this to "debug" to enable debug mode in ships-service, which allows access to things like swagger endpoint
S6_GIN_MODE=debug

# tp3 services that currently support hot reload using Tilt

WCS_PATH=

ROOM_PATH=

SESSION_MANAGER_PATH=

PLAYLIST_MANAGER_PATH=

LICENSE_SERVICE_PATH=

PACKAGE_SERVICE_PATH=

ASSET_MANAGER_PATH=

TASK_SPAWNER_PATH=
TASK_SPAWNER_PAUSE_ON_START=false

# ships services that currently support hot reload using Tilt

REWARD_SERVICE_PATH=

SESSIONS_PATH=

TRANSACTION_SERVICE_PATH=

DATA_UPLOADER_PATH=
DATA_UPLOADER_PAUSE_ON_START=false
DATA_UPLOADER_RUN_DEV_MODE=false

SHIPS_SERVICE_PATH=
SHIPS_SERVICE_PAUSE_ON_START=false

UPDATE_SERVICE_PATH=
UPDATE_SERVICE_PAUSE_ON_START=false

CARD_SERVICE_PATH=
CARD_SERVICE_PAUSE_ON_START=false

# dond services that currently support hot reload using Tilt

DOND_CLIENT_SERVICE_PATH=

# NPM token is needed to work with Node services locally

NPM_TOKEN=

# GOPROXY and GONOSUMDB are needed to work with Go services locally

GOPROXY=
GONOSUMDB=
