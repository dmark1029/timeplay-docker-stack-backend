
user  nginx;
worker_processes @{NGINX_WORKER_PROCESSES};

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections @{NGINX_WORKER_CONNECTIONS};
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #gzip  on;

    server {
        # Note the '_' is just a placeholder in case we don't specify a domain,
        # without this an empty domain, or no domains would crash the proxy
        # container
        server_name _ @{NGINX_AUTO_UPGRADE_DOMAINS};

        listen       80;
        listen  [::]:80;

        return 301 https://$host$request_uri;
    }

    # include /etc/nginx/conf.d/*.conf;
    server {
        server_name  _;
        listen       80 default_server;
        listen  [::]:80 default_server;
        listen       443 ssl default_server;

        ssl_certificate     /etc/ssl/timeplay/timeplay.crt;
        ssl_certificate_key /etc/ssl/timeplay/timeplay.key;

        # required for large size cookie
        # proxy_buffer_size          128k;
        # proxy_buffers              4 256k;
        # proxy_busy_buffers_size    256k;
        keepalive_timeout 500;
        proxy_intercept_errors off;
        client_max_body_size        512G;
        client_body_buffer_size     128k;
        proxy_connect_timeout       900;
        proxy_send_timeout          900;
        proxy_read_timeout          900;
        proxy_buffer_size           1024k;
        proxy_buffers               8 512k;
        proxy_busy_buffers_size     1024k;
        proxy_temp_file_write_size  1024k;

        #charset koi8-r;
        access_log  /var/log/nginx/host.access.log  main;

        # https://sandro-keil.de/blog/let-nginx-start-if-upstream-host-is-unavailable-or-down/
        # use resolver and variables to keep nginx running even when it cannot find rmb that are not spawn
        resolver 127.0.0.11 valid=30s;

        # https://nginx.org/en/docs/http/ngx_http_core_module.html#location
        # need to use regular expression because using variable with proxy_pass cause it not to include the path after location
        location ~ ^/as/(.*)$ {
            set $upstream http://auth-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/am/(.*)$ {
            set $upstream http://asset-manager/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/pm/(.*)$ {
            set $upstream http://playlist-manager/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/gls/(.*)$ {
            set $upstream http://gs-license-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/gps/(.*)$ {
            set $upstream http://gs-package-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/gr/(.*)$ {
            set $upstream http://game-room/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/rmb-pool/(.*)$ {
            set $upstream http://rmb-pool/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/task-spawner/(.*)$ {
            set $upstream http://task-spawner/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/sm/(.*)$ {
            set $upstream http://session-manager/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/vault/(.*)$ {
            set $upstream http://vault/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/dispatcher/(.*)$ {
            set $upstream http://dispatcher/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/inventory/(.*)$ {
            set $upstream http://inventory/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/leaderboard/(.*)$ {
            set $upstream http://leaderboard/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/token-store/(.*)$ {
            set $upstream http://token-store/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/sessions/(.*)$ {
            set $upstream http://sessions/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/transaction-service/(.*)$ {
            set $upstream http://transaction-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/reward-service/(.*)$ {
            set $upstream http://reward-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/card-service/(.*)$ {
            set $upstream http://card-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/deploy-service/(.*)$ {
            set $upstream http://deploy-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/update-service/(.*)$ {
            set $upstream http://update-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/ships-service/(.*)$ {
            set $upstream http://ships-service/$1$is_args$args;
            proxy_pass $upstream;
        }
        location ~ ^/auth/(.*)$ {
            set $upstream http://keycloak:8080/auth/$1$is_args$args;

            proxy_set_header X-Real-IP          $proxy_protocol_addr;
            proxy_set_header X-Forwarded-Host   $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Proto  $scheme;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;

            proxy_pass $upstream;
        }

        location ~ ^/task-(\d+)/ {
            proxy_pass http://task-$1:@{RMB_WEBSOCKET_PORT}/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 10m;
        }

        ### all regular expression match should be above this catch all ###
        location ~ ^/(.*)$ {
            set $upstream http://@{CATCH_ALL_SERVICE}/$1$is_args$args;
            proxy_pass $upstream;
        }


        #######################################################################
        ###         ONLY Non-Regular Expression Match BELOW                 ###
        #######################################################################


        location ^~ /dond-client-service/ {
            set $upstream http://dond-client-service/;
            proxy_pass $upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 10m;
        }

        # all frontend pages
        location ^~ /frontend {
            root   /usr/share/nginx;
            index  index.html;

            # tp3-opcon used to be called bingo-opcon, redirect any URLs that still reference bingo-opcon to tp3-opcon
            location /frontend/bingo-opcon {
                rewrite ^/frontend/bingo-opcon(.*)$ /frontend/tp3-opcon$1 permanent;
            }

            location /frontend/ships-client {
                try_files $uri $uri/ /frontend/ships-client/index.html;
            }
        }
        

        # assets cached by asset-manager
        location ^~ /assets {
            root   /usr/share/nginx;
        }

        # packages cached by gs-package-service
        location ^~ /packages {
            root   /usr/share/nginx;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}

# stream {
#     log_format basic '$remote_addr [$time_local] '
#                      '$protocol $status $bytes_sent $bytes_received '
#                      '$session_time';

#     access_log  /var/log/nginx/stream.access.log  basic;

#     resolver 127.0.0.11 valid=30s;

#     # rmb tcp connection, proxy connection from port to container
#     map $server_port $host {
#         3001 rmb-3001:8080;
#         3002 rmb-3002:8080;
#         3003 rmb-3003:8080;
#         3004 rmb-3004:8080;
#         3005 rmb-3005:8080;
#         3006 rmb-3006:8080;
#         3007 rmb-3007:8080;
#         3008 rmb-3008:8080;
#         3009 rmb-3009:8080;
#         3010 rmb-3010:8080;
#     }

#     server {
#         listen 3001-3010;
#         proxy_pass $host;
#     }
# }
